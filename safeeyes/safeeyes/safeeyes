#!/usr/bin/env python2

# Safe Eyes is a utility to remind you to take break frequently
# to protect your eyes from eye strain.

# Copyright (C) 2016  Gobinath

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import gi
import json
import shutil
import errno
import dbus
import logging
from threading import Timer
from dbus.mainloop.glib import DBusGMainLoop

from BreakScreen import BreakScreen
from TrayIcon import TrayIcon
from SettingsDialog import SettingsDialog
from SafeEyesCore import SafeEyesCore
from Notification import Notification

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

# Define necessary paths
bin_directory = os.path.dirname(os.path.realpath(__file__))
config_file_path = os.path.join(os.path.expanduser('~'), '.config/safeeyes/safeeyes.json')
style_sheet_path = os.path.join(os.path.expanduser('~'), '.config/safeeyes/style/safeeyes_style.css')
log_file_path = os.path.join(os.path.expanduser('~'), '.config/safeeyes/safeeyes.log')
break_screen_glade = os.path.join(bin_directory, "glade/break_screen.glade")
settings_dialog_glade = os.path.join(bin_directory, "glade/settings_dialog.glade")
system_config_file_path = os.path.join(bin_directory, "config/safeeyes.json")
system_style_sheet_path = os.path.join(bin_directory, "config/style/safeeyes_style.css")
system_language_directory = os.path.join(bin_directory, "config/lang")

is_active = True
CONFIGURATION_VERSION = 1

def show_settings():
	logging.info("Show Settings dialog")
	settings_dialog = SettingsDialog(config, language, save_settings, settings_dialog_glade)
	settings_dialog.show()

def show_notification():
	notification.show(config['pre_break_warning_time'])

def show_alert(message):
	logging.info("Show the break screen")
	notification.close()
	break_screen.show_message(message)

def close_alert():
	logging.info("Close the break screen")
	break_screen.close()

def on_countdown(count):
	break_screen.show_count_down(count)

def on_quit():
	logging.info("Quit Safe Eyes")
	core.stop()
	notification.quite();
	Gtk.main_quit()

def handle_suspend_callback(sleeping):
	if sleeping:
		# Sleeping / suspending
		if is_active:
			core.stop()
			logging.info("Stopped Safe Eyes due to system suspend")
	else:
		# Resume from sleep
		if is_active:
			core.start()
			logging.info("Resumed Safe Eyes after system wakeup")

def handle_system_suspend():
	DBusGMainLoop(set_as_default=True)
	bus = dbus.SystemBus()
	bus.add_signal_receiver(handle_suspend_callback, 'PrepareForSleep', 'org.freedesktop.login1.Manager', 'org.freedesktop.login1')

def on_skipped():
	logging.info("User skipped the break")
	core.skip_break()

def save_settings(config):
	logging.info("Saving settings to safeeyes.json")
	if is_active:
		core.stop()
	# Write the configuration to file
	with open(config_file_path, 'w') as config_file:
		json.dump(config, config_file, indent=4, sort_keys=True)
	
	# Restart the core and intialize the components
	logging.info("Initialize SafeEyesCore with modified settings")
	core.initialize(config, language)
	break_screen.initialize(config, language)
	if is_active:
		# 1 sec delay is required to give enough time for core to be stopped
		Timer(1.0, core.start).start()

def enable_safeeyes():
	is_active = True
	core.toggle_active_state()

def disable_safeeyes():
	is_active = False
	core.toggle_active_state()

def initialize_config():
	global config
	config_dir_path = os.path.join(os.path.expanduser('~'), '.config/safeeyes/style')
	startup_dir_path = os.path.join(os.path.expanduser('~'), '.config/autostart')
	try:
		os.makedirs(config_dir_path)
	except OSError as exc:
		if exc.errno == errno.EEXIST and os.path.isdir(config_dir_path):
			pass
		else:
			raise

	if not os.path.isfile(config_file_path):
		shutil.copy2(system_config_file_path, config_file_path)

		try:
			os.makedirs(startup_dir_path)
		except OSError as exc:
			if exc.errno == errno.EEXIST and os.path.isdir(startup_dir_path):
				pass
			else:
				raise

		# Add to startup for the first time only
		try:
			os.symlink("/usr/share/applications/safeeyes.desktop", os.path.join(startup_dir_path, "safeeyes.desktop"))
		except OSError as exc:
			pass

	if not os.path.isfile(style_sheet_path):
		shutil.copy2(system_style_sheet_path, style_sheet_path)

	# Read the configuration
	with open(config_file_path) as config_file:    
		config = json.load(config_file)

"""
	Configuration file has a version config_version.
	It is used to overwrite the exsiting config file if there is an update.
	Earlier versions did not have this attribute so the following method 
	checks the version and if it mismatches, it will overwrite the exsiting
	config files. If the version property is not available, the file is 
	considered as an older one and replaced by the new configuration file.
"""
def validate_config():
	version_mismatch = False
	try:
		# Check the config version
		config_version = config['meta']['config_version']
		version_mismatch = config_version is not CONFIGURATION_VERSION
	except:
		version_mismatch = True

	if version_mismatch:
		# Remove ~/.config/safeeyes directory
		try:
			shutil.rmtree(os.path.join(os.path.expanduser('~'), '.config/safeeyes'), ignore_errors=False)
		except:
			pass
		
		# Remove startup script
		try:
			os.remove("/usr/share/applications/safeeyes.desktop")
		except:
			pass

		# Create config files again
		initialize_config()

def main():
	initialize_config()

	# Configure logging. Reset with every restart
	logging.basicConfig(format='%(asctime)s [%(levelname)s] %(message)s', filename=log_file_path, filemode='w', level=logging.INFO)
	logging.info("Starting Safe Eyes")

	validate_config()

	global break_screen
	global core
	global notification
	global tray_icon
	global language
	
	language_file_path = os.path.join(system_language_directory, str(config['language']) + '.json')
	with open(language_file_path) as language_file:
		language = json.load(language_file)
	
	tray_icon = TrayIcon(language, show_settings, enable_safeeyes, disable_safeeyes, on_quit)
	break_screen = BreakScreen(on_skipped, break_screen_glade, style_sheet_path)
	break_screen.initialize(config, language)
	core = SafeEyesCore(show_notification, show_alert, close_alert, on_countdown, tray_icon.next_break_time)
	core.initialize(config, language)
	core.start()
	notification = Notification(language)
	
	handle_system_suspend()

	Gtk.main()

main()